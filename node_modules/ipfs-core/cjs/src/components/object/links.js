'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var dagPB = require('@ipld/dag-pb');
var dagCBOR = require('@ipld/dag-cbor');
var raw = require('multiformats/codecs/raw');
var cid = require('multiformats/cid');
var withTimeoutOption = require('ipfs-core-utils/with-timeout-option');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var dagPB__namespace = /*#__PURE__*/_interopNamespace(dagPB);
var dagCBOR__namespace = /*#__PURE__*/_interopNamespace(dagCBOR);
var raw__namespace = /*#__PURE__*/_interopNamespace(raw);

function findLinks(node, links = []) {
  for (const key in node) {
    const val = node[key];
    if (key === '/' && Object.keys(node).length === 1) {
      try {
        links.push({
          Name: '',
          Tsize: 0,
          Hash: cid.CID.parse(val)
        });
        continue;
      } catch (_) {
      }
    }
    const cid$1 = cid.CID.asCID(val);
    if (cid$1) {
      links.push({
        Name: '',
        Tsize: 0,
        Hash: cid$1
      });
      continue;
    }
    if (Array.isArray(val)) {
      findLinks(val, links);
    }
    if (val && typeof val === 'object') {
      findLinks(val, links);
    }
  }
  return links;
}
function createLinks({repo, codecs}) {
  async function links(cid, options = {}) {
    const codec = await codecs.getCodec(cid.code);
    const block = await repo.blocks.get(cid, options);
    const node = codec.decode(block);
    if (cid.code === raw__namespace.code) {
      return [];
    }
    if (cid.code === dagPB__namespace.code) {
      return node.Links;
    }
    if (cid.code === dagCBOR__namespace.code) {
      return findLinks(node);
    }
    throw new Error(`Cannot resolve links from codec ${ cid.code }`);
  }
  return withTimeoutOption.withTimeoutOption(links);
}

exports.createLinks = createLinks;
