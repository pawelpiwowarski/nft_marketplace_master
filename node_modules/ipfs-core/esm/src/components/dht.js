import PeerId from 'peer-id';
import errCode from 'err-code';
import { NotEnabledError } from '../errors.js';
import get from 'dlv';
import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';
export function createDht({network, repo}) {
  const {get, put, findProvs, findPeer, provide, query} = {
    async get(key, options = {}) {
      const {libp2p} = await use(network, options);
      return libp2p._dht.get(key, options);
    },
    async *put(key, value, options) {
      const {libp2p} = await use(network, options);
      yield* libp2p._dht.put(key, value);
    },
    async *findProvs(cid, options = { numProviders: 20 }) {
      const {libp2p} = await use(network, options);
      for await (const peer of libp2p._dht.findProviders(cid, {
          maxNumProviders: options.numProviders,
          signal: options.signal
        })) {
        yield {
          id: peer.id.toB58String(),
          addrs: peer.addrs
        };
      }
    },
    async findPeer(peerId, options) {
      const {libp2p} = await use(network, options);
      const peer = await libp2p._dht.findPeer(PeerId.parse(peerId));
      return {
        id: peer.id.toB58String(),
        addrs: peer.multiaddrs
      };
    },
    async *provide(cids, options = { recursive: false }) {
      const {libp2p} = await use(network, options);
      const cidArr = Array.isArray(cids) ? cids : [cids];
      const hasCids = await Promise.all(cidArr.map(cid => repo.blocks.has(cid)));
      const hasAll = hasCids.every(has => has);
      if (!hasAll) {
        throw errCode(new Error('block(s) not found locally, cannot provide'), 'ERR_BLOCK_NOT_FOUND');
      }
      if (options.recursive) {
        throw errCode(new Error('not implemented yet'), 'ERR_NOT_IMPLEMENTED_YET');
      }
      for (const cid of cidArr) {
        yield libp2p._dht.provide(cid);
      }
    },
    async *query(peerId, options) {
      const {libp2p} = await use(network, options);
      for await (const closerPeerId of libp2p._dht.getClosestPeers(PeerId.parse(peerId).toBytes())) {
        yield {
          id: closerPeerId.toB58String(),
          addrs: []
        };
      }
    }
  };
  return {
    get: withTimeoutOption(get),
    put: withTimeoutOption(put),
    findProvs: withTimeoutOption(findProvs),
    findPeer: withTimeoutOption(findPeer),
    provide: withTimeoutOption(provide),
    query: withTimeoutOption(query)
  };
}
const use = async (network, options) => {
  const net = await network.use(options);
  if (get(net.libp2p, '_config.dht.enabled', false)) {
    return net;
  } else {
    throw new NotEnabledError('dht not enabled');
  }
};