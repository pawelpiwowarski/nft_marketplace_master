/**
 * @param {Options} options
 */
export function create(options?: Options): Promise<IPFS>;
export type Options = import('../types').Options;
export type Print = import('../types').Print;
export type StorageAPI = typeof import("./storage.js");
export type BlockCodec = import('multiformats/codecs/interface').BlockCodec<any, any>;
export type MultihashHasher = import('multiformats/hashes/interface').MultihashHasher;
export type MultibaseCodec = import('multiformats/bases/interface').MultibaseCodec<any>;
/**
 * @typedef {import('../types').Options} Options
 * @typedef {import('../types').Print} Print
 * @typedef {import('./storage')} StorageAPI
 * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec
 * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher
 * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec
 */
declare class IPFS {
    /**
     * @param {Object} config
     * @param {Print} config.print
     * @param {Storage} config.storage
     * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs
     * @param {Options} config.options
     */
    constructor({ print, storage, codecs, options }: {
        print: Print;
        storage: Storage;
        codecs: import('ipfs-core-utils/multicodecs').Multicodecs;
        options: Options;
    });
    hashers: Multihashes;
    bases: Multibases;
    preload: import("../types").Preload;
    name: NameAPI;
    ipns: IPNSAPI;
    pin: PinAPI;
    resolve: (path: string, opts?: any) => Promise<string>;
    block: BlockAPI;
    refs: ((ipfsPath: import("ipfs-core-types/src/utils").IPFSPath | import("ipfs-core-types/src/utils").IPFSPath[], options?: any) => AsyncIterable<import("ipfs-core-types/src/refs").RefsResult>) & {
        local: (options?: any) => AsyncIterable<import("ipfs-core-types/src/refs").RefsResult>;
    };
    start: () => Promise<void>;
    stop: (options?: any) => Promise<void>;
    dht: {
        get: (key: Uint8Array, options?: any) => Promise<Uint8Array>;
        put: (key: Uint8Array, value: Uint8Array, options?: any) => AsyncIterable<import("ipfs-core-types/src/dht").DHTQueryMessage>;
        findProvs: (cid: import("multiformats/cid").CID, options?: any) => AsyncIterable<import("ipfs-core-types/src/dht").PeerResult>;
        findPeer: (peerId: string, options?: any) => Promise<import("ipfs-core-types/src/dht").PeerResult>;
        provide: (cid: import("multiformats/cid").CID | import("multiformats/cid").CID[], options?: any) => AsyncIterable<import("ipfs-core-types/src/dht").DHTQueryMessage>;
        query: (peerId: string, options?: any) => AsyncIterable<import("ipfs-core-types/src/dht").PeerResult>;
    };
    pubsub: {
        subscribe: (topic: string, handler: import("ipfs-core-types/src/pubsub").MessageHandlerFn, options?: any) => Promise<void>;
        unsubscribe: (topic: string, handler: import("ipfs-core-types/src/pubsub").MessageHandlerFn | undefined, options?: any) => Promise<void>;
        publish: (topic: string, data: Uint8Array, options?: any) => Promise<void>;
        ls: (options?: any) => Promise<string[]>;
        peers: (topic: string, options?: any) => Promise<string[]>;
    };
    dns: (domain: string, options?: any) => Promise<string>;
    isOnline: () => boolean;
    id: (options?: any) => Promise<import("ipfs-core-types/src/root").IDResult>;
    version: (_options?: any) => Promise<import("ipfs-core-types/src/root").VersionResult>;
    bitswap: BitswapAPI;
    bootstrap: BootstrapAPI;
    config: {
        getAll: (options?: any) => Promise<import("ipfs-core-types/src/config").Config>;
        get: (key: string, options: any) => Promise<string | object>;
        set: (key: string, value: any, options: any) => Promise<void>;
        replace: (value: import("ipfs-core-types/src/config").Config, options: any) => Promise<void>;
        profiles: {
            apply: (profileName: string, options?: any) => Promise<import("ipfs-core-types/src/config/profiles").ProfilesApplyResult>;
            list: (_options: any) => Promise<import("ipfs-core-types/src/config/profiles").Profile[]>;
        };
    };
    ping: (peerId: string, options?: any) => AsyncIterable<import("ipfs-core-types/src/root").PingResult>;
    add: (entry: import("ipfs-core-types/src/utils").ImportCandidate, options?: any) => Promise<import("ipfs-core-types/src/root").AddResult>;
    addAll: (source: import("ipfs-core-types/src/utils").ImportCandidateStream, options?: any) => AsyncIterable<import("ipfs-core-types/src/root").AddResult>;
    cat: (ipfsPath: import("ipfs-core-types/src/utils").IPFSPath, options?: any) => AsyncIterable<Uint8Array>;
    get: (ipfsPath: import("ipfs-core-types/src/utils").IPFSPath, options?: any) => AsyncIterable<Uint8Array>;
    ls: (ipfsPath: import("ipfs-core-types/src/utils").IPFSPath, options?: any) => AsyncIterable<import("ipfs-core-types/src/root").IPFSEntry>;
    dag: DagAPI;
    files: import("ipfs-core-types/src/files").API<any>;
    key: KeyAPI;
    object: ObjectAPI;
    repo: RepoAPI;
    stats: StatsAPI;
    swarm: SwarmAPI;
    commands: () => Promise<never>;
    diag: {
        cmds: () => Promise<never>;
        net: () => Promise<never>;
        sys: () => Promise<never>;
    };
    log: {
        level: () => Promise<never>;
        ls: () => Promise<never>;
        tail: () => AsyncGenerator<never, never, unknown>;
    };
    mount: () => Promise<never>;
    codecs: Multicodecs;
    /**
     * `IPFS.create` will do the initialization. Keep this around for backwards
     * compatibility.
     *
     * @deprecated
     */
    init(): Promise<void>;
}
import { Multihashes } from "ipfs-core-utils/multihashes";
import { Multibases } from "ipfs-core-utils/multibases";
import { NameAPI } from "./name/index.js";
import { IPNSAPI } from "./ipns.js";
import { PinAPI } from "./pin/index.js";
import { BlockAPI } from "./block/index.js";
import { BitswapAPI } from "./bitswap/index.js";
import { BootstrapAPI } from "./bootstrap/index.js";
import { DagAPI } from "./dag/index.js";
import { KeyAPI } from "./key/index.js";
import { ObjectAPI } from "./object/index.js";
import { RepoAPI } from "./repo/index.js";
import { StatsAPI } from "./stats/index.js";
import { SwarmAPI } from "./swarm/index.js";
import { Multicodecs } from "ipfs-core-utils/multicodecs";
import { Storage } from "./storage.js";
export {};
//# sourceMappingURL=index.d.ts.map