export = parallel;
/**
 * Takes an (async) iterator that emits promise-returning functions,
 * invokes them in parallel and emits the results as they become available but
 * in the same order as the input
 *
 * @template T
 * @param {Iterable<() => Promise<T>> | AsyncIterable<() => Promise<T>>} source
 * @param {number} [concurrency=1]
 * @returns {AsyncIterable<T>}
 */
declare function parallel<T>(source: Iterable<() => Promise<T>> | AsyncIterable<() => Promise<T>>, concurrency?: number | undefined): AsyncIterable<T>;
//# sourceMappingURL=index.d.ts.map