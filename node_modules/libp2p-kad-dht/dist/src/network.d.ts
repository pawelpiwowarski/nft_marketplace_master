export = Network;
/**
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream
 */
/**
 * Handle network operations for the dht
 */
declare class Network {
    /**
     * Create a new network
     *
     * @param {import('./index')} dht
     */
    constructor(dht: import('./index'));
    dht: import("./index");
    readMessageTimeout: number;
    _log: debug.Debugger & {
        error: debug.Debugger;
    };
    _rpc: ({ stream, connection }: {
        stream: import("libp2p-interfaces/src/stream-muxer/types").MuxedStream;
        connection: import("libp2p-interfaces/src/connection/connection");
    }) => Promise<void>;
    /**
     * Registrar notifies a connection successfully with dht protocol.
     *
     * @param {PeerId} peerId - remote peer id
     */
    _onPeerConnected(peerId: PeerId): Promise<void>;
    _running: boolean;
    /**
     * Start the network
     */
    start(): void;
    _registrarId: any;
    /**
     * Stop all network activity
     */
    stop(): void;
    /**
     * Is the network online?
     *
     * @type {boolean}
     */
    get isStarted(): boolean;
    /**
     * Are all network components there?
     *
     * @type {boolean}
     */
    get isConnected(): boolean;
    /**
     * Send a request and record RTT for latency measurements.
     *
     * @async
     * @param {PeerId} to - The peer that should receive a message
     * @param {Message} msg - The message to send.
     */
    sendRequest(to: PeerId, msg: Message): Promise<Message>;
    /**
     * Sends a message without expecting an answer.
     *
     * @param {PeerId} to
     * @param {Message} msg
     */
    sendMessage(to: PeerId, msg: Message): Promise<any>;
    /**
     * Write a message and read its response.
     * If no response is received after the specified timeout
     * this will error out.
     *
     * @param {MuxedStream} stream - the stream to use
     * @param {Uint8Array} msg - the message to send
     */
    _writeReadMessage(stream: MuxedStream, msg: Uint8Array): Promise<Message>;
    /**
     * Write a message to the given stream.
     *
     * @param {MuxedStream} stream - the stream to use
     * @param {Uint8Array} msg - the message to send
     */
    _writeMessage(stream: MuxedStream, msg: Uint8Array): any;
}
declare namespace Network {
    export { PeerId, MuxedStream };
}
type PeerId = import('peer-id');
import Message = require("./message");
type MuxedStream = import('libp2p-interfaces/src/stream-muxer/types').MuxedStream;
//# sourceMappingURL=network.d.ts.map