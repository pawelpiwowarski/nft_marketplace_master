declare function _exports(dht: import('../')): {
    /**
     * Store the given key/value pair locally, in the datastore.
     *
     * @param {Uint8Array} key
     * @param {Uint8Array} rec - encoded record
     */
    _putLocal(key: Uint8Array, rec: Uint8Array): Promise<void>;
    /**
     * Store the given key/value  pair in the DHT.
     *
     * @param {Uint8Array} key
     * @param {Uint8Array} value
     * @param {object} [options] - put options
     * @param {number} [options.minPeers] - minimum number of peers required to successfully put (default: closestPeers.length)
     */
    put(key: Uint8Array, value: Uint8Array, options?: {
        minPeers?: number | undefined;
    } | undefined): Promise<void>;
    /**
     * Get the value to the given key.
     * Times out after 1 minute by default.
     *
     * @param {Uint8Array} key
     * @param {object} [options] - get options
     * @param {number} [options.timeout] - optional timeout (default: 60000)
     */
    get(key: Uint8Array, options?: {
        timeout?: number | undefined;
    } | undefined): Promise<Uint8Array>;
    /**
     * Get the `n` values to the given key without sorting.
     *
     * @param {Uint8Array} key
     * @param {number} nvals
     * @param {object} [options] - get options
     * @param {number} [options.timeout] - optional timeout (default: 60000)
     */
    getMany(key: Uint8Array, nvals: number, options?: {
        timeout?: number | undefined;
    } | undefined): Promise<{
        val: Uint8Array;
        from: import("peer-id");
    }[]>;
};
export = _exports;
export type PeerId = import('peer-id');
export type DHTQueryResult = import('../query').DHTQueryResult;
//# sourceMappingURL=index.d.ts.map