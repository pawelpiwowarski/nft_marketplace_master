export = Path;
/**
 * @typedef {import('peer-id')} PeerId
 */
/**
 * Manages a single Path through the DHT.
 */
declare class Path {
    /**
     * Creates a Path.
     *
     * @param {import('./run')} run
     * @param {import('./index').QueryFunc} queryFunc
     */
    constructor(run: import('./run'), queryFunc: import('./index').QueryFunc);
    run: import("./run");
    queryFunc: (...args: any[]) => Promise<import("./index").QueryResult>;
    /** @type {PeerId[]} */
    initialPeers: PeerId[];
    /** @type {PeerQueue | null} */
    peersToQuery: PeerQueue | null;
    /** @type {import('./index').QueryResult | null} */
    res: import('./index').QueryResult | null;
    /**
     * Add a peer to the set of peers that are used to intialize the path.
     *
     * @param {PeerId} peer
     */
    addInitialPeer(peer: PeerId): void;
    /**
     * Execute the path
     */
    execute(): Promise<void>;
    /**
     * Add a peer to the peers to be queried.
     *
     * @param {PeerId} peer
     */
    addPeerToQuery(peer: PeerId): Promise<void>;
}
declare namespace Path {
    export { PeerId };
}
type PeerId = import('peer-id');
import PeerQueue = require("../peer-list/peer-queue");
//# sourceMappingURL=path.d.ts.map