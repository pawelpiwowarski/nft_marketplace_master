export = Run;
/**
 * @typedef {import('peer-id')} PeerId
 */
/**
 * Manages a single run of the query.
 */
declare class Run extends EventEmitter {
    /**
     * Creates a Run.
     *
     * @param {import('./index')} query
     */
    constructor(query: import('./index'));
    query: import("./index");
    running: boolean;
    /** @type {WorkerQueue[]} */
    workers: WorkerQueue[];
    peersSeen: Set<any>;
    /** @type {Error[]} */
    errors: Error[];
    /** @type {PeerDistanceList | null} */
    peersQueried: PeerDistanceList | null;
    /**
     * Stop all the workers
     */
    stop(): void;
    /**
     * Execute the run with the given initial set of peers.
     *
     * @param {PeerId[]} peers
     */
    execute(peers: PeerId[]): Promise<{
        finalSet: Set<import("peer-id")>;
        /** @type {import('./index').QueryResult[]} */
        paths: import('./index').QueryResult[];
    }>;
    /**
     * Execute all paths through the DHT.
     *
     * @param {Array<Path>} paths
     * @returns {Promise<void>}
     */
    executePaths(paths: Array<Path>): Promise<void>;
    /**
     * Initialize the list of queried peers, then start a worker queue for the
     * given path.
     *
     * @param {Path} path
     * @returns {Promise<void>}
     */
    workerQueue(path: Path): Promise<void>;
    /**
     * Create and start a worker queue for a particular path.
     *
     * @param {Path} path
     * @returns {Promise<void>}
     */
    startWorker(path: Path): Promise<void>;
    /**
     * Initialize the list of closest peers we've queried - this is shared by all
     * paths in the run.
     *
     * @returns {Promise<void>}
     */
    init(): Promise<void>;
    peersQueriedPromise: Promise<void> | undefined;
    /**
     * If we've queried K peers, and the remaining peers in the given `worker`'s queue
     * are all further from the key than the peers we've already queried, then we should
     * stop querying on that `worker`.
     *
     * @param {WorkerQueue} worker
     * @returns {Promise<boolean>}
     */
    continueQuerying(worker: WorkerQueue): Promise<boolean>;
}
declare namespace Run {
    export { PeerId };
}
import EventEmitter = require("events");
import WorkerQueue = require("./worker-queue");
import PeerDistanceList = require("../peer-list/peer-distance-list");
type PeerId = import('peer-id');
import Path = require("./path");
//# sourceMappingURL=run.d.ts.map