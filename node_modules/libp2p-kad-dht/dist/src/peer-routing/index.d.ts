declare function _exports(dht: import('../index')): {
    /**
     * Ask peer `peer` if they know where the peer with id `target` is.
     *
     * @param {PeerId} peer
     * @param {PeerId} target
     * @returns {Promise<Message>}
     * @private
     */
    _findPeerSingle(peer: PeerId, target: PeerId): Promise<Message>;
    /**
     * Search for a peer with the given ID.
     *
     * @param {PeerId} id
     * @param {Object} [options] - findPeer options
     * @param {number} [options.timeout=60000] - how long the query should maximally run, in milliseconds
     * @returns {Promise<{ id: PeerId, multiaddrs: Multiaddr[] }>}
     */
    findPeer(id: PeerId, options?: {
        timeout?: number | undefined;
    } | undefined): Promise<{
        id: PeerId;
        multiaddrs: Multiaddr[];
    }>;
    /**
     * Kademlia 'node lookup' operation.
     *
     * @param {Uint8Array} key
     * @param {Object} [options]
     * @param {boolean} [options.shallow=false] - shallow query
     * @returns {AsyncIterable<PeerId>}
     */
    getClosestPeers(key: Uint8Array, options?: {
        shallow?: boolean | undefined;
    } | undefined): AsyncIterable<PeerId>;
    /**
     * Get the public key for the given peer id.
     *
     * @param {PeerId} peer
     */
    getPublicKey(peer: PeerId): Promise<crypto.PublicKey>;
};
export = _exports;
export type Multiaddr = import('multiaddr').Multiaddr;
import PeerId = require("peer-id");
import Message = require("../message");
import crypto = require("libp2p-crypto");
//# sourceMappingURL=index.d.ts.map