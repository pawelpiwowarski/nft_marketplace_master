export = PeerQueue;
/**
 * @typedef {import('peer-id')} PeerId
 */
/**
 * PeerQueue is a heap that sorts its entries (PeerIds) by their
 * xor distance to the inital provided key.
 */
declare class PeerQueue {
    /**
     * Create from a given peer id.
     *
     * @param {PeerId} id
     * @returns {Promise<PeerQueue>}
     */
    static fromPeerId(id: PeerId): Promise<PeerQueue>;
    /**
     * Create from a given Uint8Array.
     *
     * @param {Uint8Array} keyBuffer
     * @returns {Promise<PeerQueue>}
     */
    static fromKey(keyBuffer: Uint8Array): Promise<PeerQueue>;
    /**
     * Create a new PeerQueue.
     *
     * @param {Uint8Array} from - The sha2-256 encoded peer id
     */
    constructor(from: Uint8Array);
    from: Uint8Array;
    heap: any;
    /**
     * Add a new PeerId to the queue.
     *
     * @param {PeerId} id
     */
    enqueue(id: PeerId): Promise<void>;
    /**
     * Returns the closest peer to the `from` peer.
     *
     * @returns {PeerId}
     */
    dequeue(): PeerId;
    get length(): any;
}
declare namespace PeerQueue {
    export { PeerId };
}
type PeerId = import('peer-id');
//# sourceMappingURL=peer-queue.d.ts.map