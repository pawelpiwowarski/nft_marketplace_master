export function convertBuffer(buf: Uint8Array): Promise<Uint8Array>;
export function convertPeerId(peer: PeerId): Promise<Uint8Array>;
export function bufferToKey(buf: Uint8Array): Key;
export function keyForPublicKey(peer: PeerId): Uint8Array;
export function isPublicKeyKey(key: Uint8Array): boolean;
export function fromPublicKeyKey(key: Uint8Array): PeerId;
export function now(): number;
export function encodeBase32(buf: Uint8Array): string;
export function decodeBase32(raw: string): Uint8Array;
export function sortClosestPeers(peers: Array<PeerId>, target: Uint8Array): Promise<PeerId[]>;
export function xorCompare(a: {
    distance: Uint8Array;
}, b: {
    distance: Uint8Array;
}): 0 | 1 | -1;
export function pathSize(resultsWanted: number, numPaths: number): number;
export function createPutRecord(key: Uint8Array, value: Uint8Array): Uint8Array;
export function logger(id?: PeerId | undefined, subsystem?: string | undefined): debug.Debugger & {
    error: debug.Debugger;
};
export function withTimeout<T>(asyncFn: (...args: any[]) => Promise<T>, time?: number | undefined): (...args: any[]) => Promise<T>;
export function mapParallel<T, O>(asyncIterator: AsyncIterable<T>, asyncFn: (arg0: T) => Promise<O>): Promise<O[]>;
import PeerId = require("peer-id");
import { Key } from "interface-datastore/key";
import debug = require("debug");
export class TimeoutError extends Error {
    get code(): string;
}
//# sourceMappingURL=utils.d.ts.map